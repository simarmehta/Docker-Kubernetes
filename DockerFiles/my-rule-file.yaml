apiVersion: monitoring.coreos.com/v1
kind: PrometheusRule
metadata:
  annotations:
    kubectl.kubernetes.io/last-applied-configuration: |
      {"apiVersion":"monitoring.coreos.com/v1","kind":"PrometheusRule","metadata":{"annotations":{"meta.helm.sh/release-name":"my-pro","meta.helm.sh/release-namespace":"default","prometheus-operator-validated":"true"},"creationTimestamp":"2023-11-06T01:03:40Z","generation":2,"labels":{"app":"kube-prometheus-stack","app.kubernetes.io/instance":"my-pro","app.kubernetes.io/managed-by":"Helm","app.kubernetes.io/part-of":"kube-prometheus-stack","app.kubernetes.io/version":"52.1.0","chart":"kube-prometheus-stack-52.1.0","heritage":"Helm","release":"my-pro"},"name":"my-pro-kube-prometheus-sta-general.rules","namespace":"default","resourceVersion":"1109747","uid":"9894e64d-3c15-4c2a-aede-5f8c0ae13238"},"spec":{"groups":[{"name":"example","rules":[{"alert":"PodCrashLooping","annotations":{"description":"Pod {{ $labels.namespace }}/{{ $labels.pod }} is crash looping.","summary":"Pod is crash looping"},"expr":"kube_pod_container_status_restarts_total{job=\"kube-state-metrics\"} \u003e 5","for":"5m","labels":{"severity":"critical"}}]},{"name":"general.rules","rules":[{"alert":"TargetDown","annotations":{"description":"{{ printf \"%.4g\" $value }}% of the {{ $labels.job }}/{{ $labels.service }} targets in {{ $labels.namespace }} namespace are down.","runbook_url":"https://runbooks.prometheus-operator.dev/runbooks/general/targetdown","summary":"One or more targets are unreachable."},"expr":"100 * (count(up == 0) BY (cluster, job, namespace, service) / count(up) BY (cluster, job, namespace, service)) \u003e 10","for":"10m","labels":{"severity":"warning"}},{"alert":"Watchdog","annotations":{"description":"This is an alert meant to ensure that the entire alerting pipeline is functional.\nThis alert is always firing, therefore it should always be firing in Alertmanager\nand always fire against a receiver. There are integrations with various notification\nmechanisms that send a notification when this alert is not firing. For example the\n\"DeadMansSnitch\" integration in PagerDuty.\n","runbook_url":"https://runbooks.prometheus-operator.dev/runbooks/general/watchdog","summary":"An alert that should always be firing to certify that Alertmanager is working properly."},"expr":"vector(1)","labels":{"severity":"none"}},{"alert":"InfoInhibitor","annotations":{"description":"This is an alert that is used to inhibit info alerts.\nBy themselves, the info-level alerts are sometimes very noisy, but they are relevant when combined with\nother alerts.\nThis alert fires whenever there's a severity=\"info\" alert, and stops firing when another alert with a\nseverity of 'warning' or 'critical' starts firing on the same namespace.\nThis alert should be routed to a null receiver and configured to inhibit alerts with severity=\"info\".\n","runbook_url":"https://runbooks.prometheus-operator.dev/runbooks/general/infoinhibitor","summary":"Info-level alert inhibition."},"expr":"ALERTS{severity = \"info\"} == 1 unless on(namespace) ALERTS{alertname != \"InfoInhibitor\", severity =~ \"warning|critical\", alertstate=\"firing\"} == 1","labels":{"severity":"none"}}]}]}}
    meta.helm.sh/release-name: my-pro
    meta.helm.sh/release-namespace: default
    prometheus-operator-validated: "true"
  creationTimestamp: "2023-11-06T01:03:40Z"
  generation: 3
  labels:
    app: kube-prometheus-stack
    app.kubernetes.io/instance: my-pro
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: kube-prometheus-stack
    app.kubernetes.io/version: 52.1.0
    chart: kube-prometheus-stack-52.1.0
    heritage: Helm
    release: my-pro
  name: my-pro-kube-prometheus-sta-general.rules
  namespace: default
  resourceVersion: "1457469"
  uid: 9894e64d-3c15-4c2a-aede-5f8c0ae13238
spec:
  groups:
  - name: example
    rules:
    - alert: PodCrashLooping
      annotations:
        description: Pod {{ $labels.namespace }}/{{ $labels.pod }} is crash looping.
        summary: Pod is crash looping
      expr: kube_pod_container_status_restarts_total{job="kube-state-metrics"} > 1
      for: 1m
      labels:
        severity: critical
  - name: general.rules
    rules:
    - alert: TargetDown
      annotations:
        description: '{{ printf "%.4g" $value }}% of the {{ $labels.job }}/{{ $labels.service
          }} targets in {{ $labels.namespace }} namespace are down.'
        runbook_url: https://runbooks.prometheus-operator.dev/runbooks/general/targetdown
        summary: One or more targets are unreachable.
      expr: 100 * (count(up == 0) BY (cluster, job, namespace, service) / count(up)
        BY (cluster, job, namespace, service)) > 10
      for: 10m
      labels:
        severity: warning
    - alert: Watchdog
      annotations:
        description: |
          This is an alert meant to ensure that the entire alerting pipeline is functional.
          This alert is always firing, therefore it should always be firing in Alertmanager
          and always fire against a receiver. There are integrations with various notification
          mechanisms that send a notification when this alert is not firing. For example the
          "DeadMansSnitch" integration in PagerDuty.
        runbook_url: https://runbooks.prometheus-operator.dev/runbooks/general/watchdog
        summary: An alert that should always be firing to certify that Alertmanager
          is working properly.
      expr: vector(1)
      labels:
        severity: none
    - alert: InfoInhibitor
      annotations:
        description: |
          This is an alert that is used to inhibit info alerts.
          By themselves, the info-level alerts are sometimes very noisy, but they are relevant when combined with
          other alerts.
          This alert fires whenever there's a severity="info" alert, and stops firing when another alert with a
          severity of 'warning' or 'critical' starts firing on the same namespace.
          This alert should be routed to a null receiver and configured to inhibit alerts with severity="info".
        runbook_url: https://runbooks.prometheus-operator.dev/runbooks/general/infoinhibitor
        summary: Info-level alert inhibition.
      expr: ALERTS{severity = "info"} == 1 unless on(namespace) ALERTS{alertname !=
        "InfoInhibitor", severity =~ "warning|critical", alertstate="firing"} == 1
      labels:
        severity: none
